/******************************************************

                    Asukaki.RPC
* ${FILE_NAME}
* ${CREATE_TIME}
* Gnerated by rocket framework rocket_generator.py
* Warning do not edit!!!

*******************************************************/

#ifndef ${HEADER_DEFINE}
#define ${HEADER_DEFINE} 


#include <rocket/net/rpc/rpc_closure.h>
${INCLUDE_PB_HEADER}
${INCLUDE_INTERFACEBASE_HEADER_FILE}


namespace ${PROJECT_NAME} {

/*
 * Rpc Interface Class
 * Alloc one object every time RPC call begin, and destroy this object while RPC call end
*/

class ${CLASS_NAME} : public Interface{
 public:

  ${CLASS_NAME}(const ${REQUEST_TYPE}& request, ${RESPONSE_TYPE}& response, 
    rocket::RpcClosure& done, const rocket::RpcController& controller);

  ~${CLASS_NAME}();
public:
  // core business deal method
  virtual void run() override;

  // set error code and error into to response message 
  virtual void setError(long long code, const std::string& err_info) override;

  // reply to client  
  // you should call this when you want to set response back
  // it means this is rpc method done
  virtual void reply() override;

 private:
  const ${REQUEST_TYPE}& m_request;       // request object fron client

  ${RESPONSE_TYPE}& m_response;           // response object that reply to client

};


}


#endif