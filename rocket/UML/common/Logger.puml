@startuml Logger System

' 定义样式
skinparam classAttributeIconSize 1  ' 必须设置为1才能显示访问修饰符图标
skinparam linetype ortho
' 枚举定义
enum LogLevel {
    Unknown = 0
    Debug = 1
    Info = 2
    Error = 3
}

' 类定义
class Logger {
    - LogLevel m_set_level
    - std::vector<std::string> m_buffers
    - std::vector<std::string> m_app_buffers
    - Mutex m_mutex
    - Mutex m_app_mutex
    - std::string m_file_name
    - std::string m_file_path
    - int m_max_file_size
    - int m_type
    - AsyncLogger::s_ptr m_async_logger
    - AsyncLogger::s_ptr m_async_app_logger
    - TimerEvent::s_ptr m_timer_event
    --
    + Logger(LogLevel level, int type = 1)
    + ~Logger()
    + void init()
    + void pushLog(const std::string& msg)
    + void pushAppLog(const std::string& msg)
    + void log()
    + LogLevel getlogLevel() const
    + AsyncLogger::s_ptr getAsyncLogger()
    + AsyncLogger::s_ptr getAsyncAppLogger()
    + void syncLoop()
    + void flush()
    + {static} Logger* getGlobalLogger()
    + {static} void InitGlobalLogger(int type = 1)
}

class AsyncLogger {
    - pthread_t m_thread
    - std::queue<std::vector<std::string>> m_buffers
    - std::queue<std::vector<std::string>> m_app_buffers
    - std::string m_file_name
    - std::string m_file_path
    - int m_no
    - int m_max_file_size
    - sem_t m_semaphore
    - pthread_cond_t m_condition
    - Mutex m_mutex
    - std::string m_date
    - std::FILE* m_file_handler
    - bool m_reopen_flag
    - bool m_stop_flag
    --
    + AsyncLogger(const std::string& file_name, const std::string& file_path, int max_size)
    + ~AsyncLogger()
    + void stop()
    + void flush()
    + void pushLogBuffer(const std::vector<std::string>& msg)
    + {static} void* Loop(void* arg)
}

class LogEvent {
    - std::string m_file_name
    - int32_t m_file_line
    - int32_t m_pid
    - int32_t m_thred_id
    - LogLevel m_level
    - Logger::s_ptr m_logger
    --
    + LogEvent(LogLevel level)
    + const std::string& getFileName() const
    + LogLevel getLogLevel() const
    + std::string toString()
}

' 关系定义
Logger "1" *-- "2" AsyncLogger : contains
Logger "1" *-- "1" LogEvent : creates
Logger --> LogLevel : uses

note right of Logger
  Logger类采用单例模式
  支持同步和异步两种日志模式
end note

note right of AsyncLogger
  异步日志处理器
  使用独立线程处理日志写入
end note

note right of LogEvent
  日志事件类
  记录单条日志的详细信息
end note

@enduml