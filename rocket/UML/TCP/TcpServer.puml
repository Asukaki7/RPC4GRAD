@startuml TcpServer

title TcpServer Module

package "rocket::net::TCP" {

  class TcpServer {
    - m_acceptor: TcpAcceptor::s_ptr
    - m_local_addr: NetAddr::s_ptr
    - m_main_event_loop: EventLoop*
    - m_io_thread_group: IOthreadGroup*
    - m_listen_fd_event: FdEvent*
    - m_client_counts: std::atomic<int>
    - m_client: std::set<TcpConnection::s_ptr>
    - m_clear_client_timer_event: TimerEvent::s_ptr
    ---
    + TcpServer(local_addr: NetAddr::s_ptr)
    + ~TcpServer()
    + start()
    + clearClientTimer()
    ---
    - init()
    - onAccept()
  }

  class TcpAcceptor {
    - m_family: int
    - m_listen_fd: int
    - m_local_addr: NetAddr::s_ptr
    ---
    + TcpAcceptor(local_addr: NetAddr::s_ptr)
    + ~TcpAcceptor()
    + getListenFd(): int
  }

  class TcpConnection {
    - m_local_addr: NetAddr::s_ptr
    - m_remote_addr: NetAddr::s_ptr
    - m_event_loop: EventLoop*
    - m_fd: int
    - m_state: TcpState
    - m_connection_type: TcpConnectionType
    ---
    + TcpConnection(event_loop: EventLoop*, fd: int, ...)
    + ~TcpConnection()
    + setState(state: TcpState)
  }

  class NetAddr {
    + getSockAddr(): sockaddr*
    + getSockLen(): socklen_t
    + toString(): std::string
  }

  class IOthreadGroup {
    - m_io_threads: std::vector<IOThread*>
    ---
    + IOthreadGroup(size: int)
    + getIOthread(): IOThread*
  }

  TcpServer "1" *-- "1" TcpAcceptor : owns >
  TcpServer "1" *-- "1" NetAddr : owns >
  TcpServer "1" *-- "1" EventLoop : owns >
  TcpServer "1" *-- "1" IOthreadGroup : owns >
  TcpServer "1" *-- "1" FdEvent : owns >
  TcpServer "1" o-- "0..*" TcpConnection : manages >
  TcpServer "1" *-- "1" TimerEvent : owns >

  TcpAcceptor "1" *-- "1" NetAddr : owns >
  TcpConnection "1" *-- "1" NetAddr : owns >
  TcpConnection "1" *-- "1" NetAddr : owns >
  TcpConnection "1" o-- "1" EventLoop : uses >

}

@enduml 